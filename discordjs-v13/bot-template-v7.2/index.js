let ms = Date.now();

const { size_byte } = require("./utils/size_byte.js");
const config = require("./settings.json");
const color = require("./utils/color.js");
const log = require("./utils/logger.js");
const util = require('util');
const fs = require("fs");

if(config.welcome) {
    console.log(color("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥—Ä—É–≥ :), —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",[180,10,40]));
    config.welcome = false;
    fs.writeFileSync("./settings.json",JSON.stringify(config,null,4));
};

let err, _log = true;

process.on("uncaughtExceptionMonitor", err => logsError(`[MonitorErrors]\n${err.stack}`));

function logsError(log) {
    if(config.logsError === false) return;
    fs.exists("./errors.log", e => {
        if(e === false) fs.writeFileSync("./errors.log",`----------[Create file on ${new Date().toString()}]----------`);
        if(err) {
            fs.appendFileSync("./errors.log",`\n----------[New logs on ${new Date().toString()}]----------\n${log}`);
            err = false;
        } else {
            fs.appendFileSync("./errors.log",`\n${log}`);
        }
    });
}

function logsConsole(log) {
    if(config.logsConsole === false) return;
    fs.exists("./console.log", e => {
        if(e === false) fs.writeFileSync("./console.log",`----------[Create file on ${new Date().toString()}]----------`);
        if(_log) {
            fs.appendFileSync("./console.log",`\n----------[New logs on ${new Date().toString()}]----------\n${log}`);
            _log = false;
        } else {
            fs.appendFileSync("./console.log",`${log}`);
        }
    });
}

function running() {
    return new Promise((resolve,reject) => {
        if(config.logsConsole) {
            /*
            ! –§—É–Ω–∫—Ü–∏—è console.log –∑–∞–º–µ–Ω–µ–Ω–∞ —Ç—É—Ç, –Ω–µ —Å—Ç–æ–∏—Ç –Ω–µ—á–µ–≥–æ —Ç—Ä–æ–≥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ :)
            ? –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ —Ç—É—Ç –≤–∏–¥–µ—Ç—å, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
            */
            const regex = new RegExp('\\[38;2;\\d+;\\d+;\\d+m|\\[0m', 'g');
            let stdout = process.stdout;

            console.log = function(str) {
                logsConsole(util.format(str.replace(regex, '')) + "\n");
                stdout.write(util.format(str) + "\n");
            };
        };
        if(config.serverReplit) require("./modules/serverReplit/server.js").server();
        if(config.console) require("./modules/console/index.js");
        if(config.ErrorExit == false) {
            process.on("uncaughtException", err => {
                log(`[FatalErrorNoExit]\n${err.stack}`,"err");
                logsError(`[FatalErrorNoExit]\n${err.stack}`);
            });
            process.on('unhandledRejection', err => {
                log(`[ErrorPromise]: ${err.stack}`,"err");
                logsError(`[ErrorPromise]: ${err.stack}`);
            });
        };

        try {
            require("./bot/index.js");
        } catch(err) {
            log(`[TryError]: ${err.stack}`,"critical");
            logsError(`[TryError]\n${err.stack}`);
        }
    });
}

async function start() {
    try {
        console.log(`–í–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ ${process.platform}`);
        await running();
    } catch(err) {
        log(`[CatchError]: ${err.stack}`,"critical");
        logsError(`[StartError]\n${err.stack}`);
    }
}

start();

function status(boolean) {
    if(boolean) {
        return "–≤–∫–ª—é—á–µ–Ω–æ";
    }else if(boolean === false) {
        return "–≤—ã–∫–ª—é—á–µ–Ω–æ";
    }
}

if(config.debugStart) {
    console.log(`
        ========================[DEBUG]========================
        –ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${(Date.now() - ms)}ms
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–∑—É: ${size_byte(process.memoryUsage().rss)}
        –∫–æ–Ω—Å–æ–ª—å: ${status(config.console)}
        —Å–µ—Ä–≤–µ—Ä replit: ${status(config.serverReplit)}
        –í—ã—Ö–æ–¥ –ø–æ –æ—à–∏–±–∫–µ: ${status(config.ErrorExit)}
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤: ${status(config.logsError)}
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏: ${status(config.logsConsole)}
    `);
};

/*
? –§–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞, —Ç–∞–∫-–∂–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –Ω—É–∂–Ω–æ —à–∞—Ä–¥—ã –¥–µ–ª–∞—Ç—å –¥–ª—è –±–æ—Ç–∞
TODO –£–º–µ–Ω—å—à–∏—Ç –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–ø—É—Å–∫ –Ω–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–¥–æ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
*/